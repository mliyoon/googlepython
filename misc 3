# even number functions
def even_numbers(maximum):
	return_string = ""
	for x in range(2, maximum+1, 2):
		return_string += str(x) + " "
	return return_string.strip()

print(even_numbers(6))  # Should be 2 4 6
print(even_numbers(10)) # Should be 2 4 6 8 10
print(even_numbers(1))  # No numbers displayed
print(even_numbers(3))  # Should be 2
print(even_numbers(0))  # No numbers displayed

#This function prints out a multiplication 
#table (where each number is the result of multiplying the first number of its row by the number at the top of its column).


def multiplication_table(start, stop):
	for x in range (start, stop+1):
		for y in range (start, stop+1):
			print(str(x*y), end=" ")
		print()

multiplication_table(1, 3)



#function digits(n) that returns how many digits the number has. For example: 25 has 2 digits and 144 has 3 digits. 
#Tip: you can figure out the digits of a number by dividing it by 10 once per digit until there are no digits left.
def digits(n):
	count = 0
	if n == 0:
	  return 1
	while (n >= 1):
		count += 1
		n = n / 10
	return count 
	
print(digits(25))   # Should print 2
print(digits(144))  # Should print 3
print(digits(1000)) # Should print 4
print(digits(0))    # Should print 1


#print out the numbers 1 through 7.
number = 1
while number in range(1, 8):
	print(number, end=" ")
	number += 1
  
  
 #function should print out each letter of a word on a separate line.
 def show_letters(word):
	for letter in word:
		print(letter)

show_letters("Hello")



#The counter function counts down from start to stop when start is bigger than stop, and counts up from start to stop otherwise. 
def counter(start, stop):
	x = start
	if start > stop:
		return_string = "Counting down: "
		while x >= stop:
			return_string += str(x)
			x -=1
			if x >= stop:
				return_string += ","
	else:
		return_string = "Counting up: "
		while x <= stop:
			return_string += str(x)
			x +=1
			if x <= stop:
				return_string += ","
	return return_string

print(counter(1, 10)) # Should be "Counting up: 1,2,3,4,5,6,7,8,9,10"
print(counter(2, 1)) # Should be "Counting down: 2,1"
print(counter(5, 5)) # Should be "Counting up: 5"


#returns True if the first letter of the string is the same as the last letter of the string, False if theyâ€™re different. 
#Remember that you can access characters using message[0] or message[-1].
#empty string, which should return True 
def first_and_last(message):
    if len(message) == 0:
        return True
    elif message[0] == message[-1]:
        return True
    else:
        return False
   
print(first_and_last("else"))
print(first_and_last("tree"))
print(first_and_last(""))


#initials function so that it returns the initials of the words contained in the phrase received, in upper case. 
def initials(phrase):
    words = phrase.split()
    result = ""
    for word in words:
        result += word[0].upper()
    return result

print(initials("Universal Serial Bus")) # Should be: USB
print(initials("local area network")) # Should be: LAN
print(initials("Operating system")) # Should be: OS

#format string with {} 
def student_grade(name, grade):
	return ("{} received {}% on the exam".format(name, grade))

print(student_grade("Reed", 80))
print(student_grade("Paige", 92))
print(student_grade("Jesse", 85))


#convert distance using format method
def convert_distance(miles):
	km = miles * 1.6 
	result = ("{} miles equals {:.1f} km".format(miles, km))
	return result
	
print(convert_distance(12)) # Should be: 12 miles equals 19.2 km
print(convert_distance(5.5)) # Should be: 5.5 miles equals 8.8 km


#return first_name and the first initial of last_name 
def nametag(first_name, last_name):
	return("{} {:.1s}.".format(first_name, last_name))

print(nametag("Jane", "Smith")) 
# Should display "Jane S." 
print(nametag("Francesco", "Rinaldi")) 
# Should display "Francesco R." 
print(nametag("Jean-Luc", "Grand-Pierre")) 
# Should display "Jean-Luc G." 
print(convert_distance(11)) # Should be: 11 miles equals 17.6 km


def skip_elements(elements):
	# code goes here
	element = [e for i, e in enumerate(elements) if i % 2 == 0]
	return element

print(skip_elements(["a", "b", "c", "d", "e", "f", "g"])) # Should be ['a', 'c', 'e', 'g']
print(skip_elements(['Orange', 'Pineapple', 'Strawberry', 'Kiwi', 'Peach'])) # Should be ['Orange', 'Strawberry', 'Peach']
